#include "pch.h"

#include "../HanoiTowers/HanoiTowers.h"
#include "../HanoiTowers/HanoiSearch.h"

static std::string ToString(const std::vector<uint64_t>& result) {
    std::ostringstream stream;
    for (int i = 0; i < result.size(); i++) {
        if (i > 0) stream << ' ';
        stream << result[i];
    }
    return stream.str();
}

TEST(HanoiSearchTests, Search17) {
    HanoiTowers<17> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022506 59865378 60725346 63215580 65921856 68036658 69281274 70563468";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search18) {
    HanoiTowers<18> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search19) {
    HanoiTowers<19> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search20) {
    HanoiTowers<20> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search21) {
    HanoiTowers<21> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search22) {
    HanoiTowers<22> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

/*
TEST(HanoiSearchTests, Search22_Large) {
    HanoiTowers<22> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 140;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 1 1 3 5 7 11 16 24 36 55 56 81 137 172 162 183 293 435 506 588 562 779 1056 1519 1780 1930 1983 2249 2871 3957 5367 6165 6640 6435 6682 7681 9703 12897 16065 19343 21187 20383 18723 19504 22576 26272 32099 41095 50777 59003 64688 69201 71292 68681 67156 75268 86944 100209 119164 147332 177515 204782 224889 244057 256579 260975 259130 268523 284041 315174 357573 422454 498248 584496 669689 758551 833250 896393 937316 963065 965931 976387 1002517 1074868 1180867 1333313 1517312 1739091 1986711 2240243 2460210 2679036 2921970 3133773 3282166 3310557 3278853 3231351 3256992 3428461 3725929 4097544 4500983 4962051 5491437 6081337 6721036 7492105 8321084 9049786 9592379 9899301 10004107 9978092 10121519 10536587 10987870 11340567 11548195 11762418 12146810 12818271 13890191 15379880 17142571 18951216 20767329 22579947 24317501 25963100 27886723 30160897 32382724 34185772 35353488 35964076 35866505 35601656 35956925 37192010";
    EXPECT_EQ(ToString(result), expected);
}
*/

TEST(HanoiSearchTests, Search23) {
    HanoiTowers<23> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search24) {
    HanoiTowers<24> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 120;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 3 6 12 30 30 66 96 126 210 330 318 462 816 1032 936 1044 1752 2610 3036 3528 3306 4578 6318 9108 10674 11580 11844 13374 17124 23664 32184 36984 39822 38544 39936 45936 57990 77262 96366 116052 127092 122142 112086 116814 135078 157326 192498 246468 304650 354018 388128 415206 427710 411804 402504 451236 521094 600684 714750 883602 1064970 1228656 1349322 1464336 1539426 1565634 1554408 1610640 1703436 1890282 2144742 2533656 2988834 3506376 4017900 4551204 4999416 5378250 5623770 5778096 5794866 5857608 6013998 6447654 7084050 7998492 9102018 10433148 11919366 13440804 14761050 16074066 17531574 18802386 19692462 19862262 19671618 19386408 19539486 20568270 22353276 24582186 27002898 29769948 32947008 36487218 40325658 44952132 49926018 54298296 57553218 59394084 60022518 59865438 60725514 63215988 65922816 68038434 69284418 70569216";
    EXPECT_EQ(ToString(result), expected);
}
