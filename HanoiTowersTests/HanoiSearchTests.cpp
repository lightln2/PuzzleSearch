#include "pch.h"

#include "../HanoiTowers/HanoiTowers.h"
#include "../HanoiTowers/HanoiSearch.h"

static std::string ToString(const std::vector<uint64_t>& result) {
    std::ostringstream stream;
    for (int i = 0; i < result.size(); i++) {
        if (i > 0) stream << ' ';
        stream << result[i];
    }
    return stream.str();
}

TEST(HanoiSearchTests, Search17) {
    HanoiTowers<17> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search18) {
    HanoiTowers<18> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search19) {
    HanoiTowers<19> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 1 1 3 5 7 11 16 24 36 55 56 81 137 172 162 183 293 435 506 588 562 779 1056 1519 1780 1930 1983 2249 2871 3957 5367 6165 6640 6435 6682 7681 9703 12897 16065 19343 21187 20383 18723 19504 22576 26272 32099 41095 50777 59003 64688 69201 71292 68681 67156 75268 86944 100209 119164 147332 177515 204782 224889 244057 256579 260975 259130 268523 284041 315174 357573 422454 498248 584496 669689 758551 833250 896393 937316 963065 965931 976387 1002517 1074868 1180867 1333313 1517312 1739091 1986711 2240243 2460210 2679036 2921970 3133773 3282166 3310557 3278853 3231351 3256992 3428461";
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search20) {
    HanoiTowers<20> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search21) {
    HanoiTowers<21> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search22) {
    HanoiTowers<22> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

/*
TEST(HanoiSearchTests, Search22_Large) {
    HanoiTowers<22> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 140;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected = "1 1 1 3 5 7 11 16 24 36 55 56 81 137 172 162 183 293 435 506 588 562 779 1056 1519 1780 1930 1983 2249 2871 3957 5367 6165 6640 6435 6682 7681 9703 12897 16065 19343 21187 20383 18723 19504 22576 26272 32099 41095 50777 59003 64688 69201 71292 68681 67156 75268 86944 100209 119164 147332 177515 204782 224889 244057 256579 260975 259130 268523 284041 315174 357573 422454 498248 584496 669689 758551 833250 896393 937316 963065 965931 976387 1002517 1074868 1180867 1333313 1517312 1739091 1986711 2240243 2460210 2679036 2921970 3133773 3282166 3310557 3278853 3231351 3256992 3428461 3725929 4097544 4500983 4962051 5491437 6081337 6721036 7492105 8321084 9049786 9592379 9899301 10004107 9978092 10121519 10536587 10987870 11340567 11548195 11762418 12146810 12818271 13890191 15379880 17142571 18951216 20767329 22579947 24317501 25963100 27886723 30160897 32382724 34185772 35353488 35964076 35866505 35601656 35956925 37192010";
    EXPECT_EQ(ToString(result), expected);
}
*/

TEST(HanoiSearchTests, Search23) {
    HanoiTowers<23> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}

TEST(HanoiSearchTests, Search24) {
    HanoiTowers<24> towers;
    std::string initial = towers.ToString(0);
    SearchOptions opts;
    opts.maxSteps = 100;
    auto result = HanoiSearch<towers.Size>(initial, opts);
    std::string expected
    EXPECT_EQ(ToString(result), expected);
}
